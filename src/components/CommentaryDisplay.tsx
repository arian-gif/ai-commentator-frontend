import React, { useState, useEffect } from 'react';
import { Mic, Volume2, Copy, Share } from 'lucide-react';
import { Button } from './ui/button';
import { Card } from './ui/card';
import { useToast } from '@/hooks/use-toast';

interface CommentaryDisplayProps {
  commentary: string;
  isGenerating: boolean;
}

export const CommentaryDisplay: React.FC<CommentaryDisplayProps> = ({
  commentary,
  isGenerating
}) => {
  const [displayedText, setDisplayedText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    if (commentary && !isGenerating) {
      setIsTyping(true);
      setDisplayedText('');
      
      let currentIndex = 0;
      const interval = setInterval(() => {
        if (currentIndex <= commentary.length) {
          setDisplayedText(commentary.slice(0, currentIndex));
          currentIndex++;
        } else {
          setIsTyping(false);
          clearInterval(interval);
        }
      }, 30);

      return () => clearInterval(interval);
    }
  }, [commentary, isGenerating]);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(commentary);
      toast({
        title: "Commentary Copied!",
        description: "The AI commentary has been copied to your clipboard.",
      });
    } catch (err) {
      toast({
        title: "Copy Failed",
        description: "Could not copy commentary to clipboard.",
        variant: "destructive",
      });
    }
  };

  const shareCommentary = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'AI Sports Commentary',
          text: commentary,
        });
      } catch (err) {
        copyToClipboard();
      }
    } else {
      copyToClipboard();
    }
  };

  if (!commentary && !isGenerating) {
    return (
      <Card className="p-8 card-shadow border-2 border-dashed border-muted-foreground/25">
        <div className="text-center space-y-4">
          <Mic className="h-16 w-16 text-muted-foreground mx-auto" />
          <div className="space-y-2">
            <h3 className="text-xl font-bold text-foreground">Ready for Commentary</h3>
            <p className="text-muted-foreground">
              Upload a video and hit generate to get AI-powered sports commentary!
            </p>
          </div>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6 card-shadow border-2 border-primary/20">
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Volume2 className="h-6 w-6 text-primary animate-bounce-sports" />
            <h3 className="text-lg font-bold text-foreground">AI Sports Commentary</h3>
          </div>
          
          {commentary && !isGenerating && (
            <div className="flex space-x-2">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={copyToClipboard}
                className="text-muted-foreground hover:text-primary"
              >
                <Copy className="h-4 w-4" />
              </Button>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={shareCommentary}
                className="text-muted-foreground hover:text-primary"
              >
                <Share className="h-4 w-4" />
              </Button>
            </div>
          )}
        </div>

        <div className="bg-muted/30 rounded-lg p-4 min-h-[120px]">
          {isGenerating ? (
            <div className="flex items-center space-x-2 text-muted-foreground">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
              <span className="text-sm">Generating epic commentary...</span>
            </div>
          ) : (
            <div className="space-y-2">
              <p className={`text-foreground leading-relaxed ${isTyping ? 'animate-typewriter' : ''}`}>
                {displayedText}
                {isTyping && <span className="animate-pulse">|</span>}
              </p>
            </div>
          )}
        </div>

        {commentary && !isGenerating && (
          <div className="flex justify-center">
            <div className="text-xs text-muted-foreground bg-muted/20 px-3 py-1 rounded-full">
              üéôÔ∏è Generated by AI Sports Commentator
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};